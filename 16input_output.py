# ----------------------------------------
# 1.输出格式美化
# Python两种输出值的方式: 表达式语句和 print() 函数
# 第三种方式是使用文件对象的 write() 方法，标准输出文件可以用 sys.stdout 引用
# 如果你希望输出的形式更加多样，可以使用 str.format() 函数来格式化输出值
# 如果你希望将输出的值转成字符串，可以使用 repr() 或 str() 函数来实现
# str()： 函数返回一个用户易读的表达形式
# repr()： 产生一个解释器易读的表达形式
s = 'Hello, test'
print(str(s))
print(repr(s))
print(str(1 / 7))
x = 10 * 3.25
y = 200 * 200
s = 'x 的值为： ' + repr(x) + ',  y 的值为：' + repr(y) + '...'
print(s)
#  repr() 函数可以转义字符串中的特殊字符
hello = 'hello, test\n'
hellos = repr(hello)
print(hellos)
# repr() 的参数可以是 Python 的任何对象
print(repr((x, y, ('Google', 'book'))))

# 这里有两种方式输出一个平方与立方的表:
for x in range(1, 11):
    print(repr(x).rjust(2), repr(x * x).rjust(3), end=' ')
    # 注意前一行 'end' 的使用
    print(repr(x * x * x).rjust(4))

for x in range(1, 11):
    print('{0:2d} {1:3d} {2:4d}'.format(x, x * x, x * x * x))
# format()函数
# 字符串的参数使用{NUM}进行表示,0, 表示第一个参数,1, 表示第二个参数, 以后顺次递加;
# 这里面：{0:2d} 表示第一个参数x的格式。0 代表x,:2d 表示两个宽度的10进制数显示。
#        {1:3d} 表示第一个参数x*x的格式。1 代表x*x,:3d 表示三个宽度的10进制数显示。
#        {2:4d} 表示第一个参数x*x*x的格式。2代表x*x*x,:4d 表示四个宽度的10进制数显示。

# 注意：在第一个例子中, 每列间的空格由 print() 添加。
# 这个例子展示了字符串对象的 rjust() 方法, 它可以将字符串靠右, 并在左边填充空格。
# 还有类似的方法, 如 ljust() 和 center()。 这些方法并不会写任何东西, 它们仅仅返回新的字符串。
# 另一个方法 zfill(), 它会在数字的左边填充 0，如下所示：
print("'12'.zfill(5):" + '12'.zfill(5))
print("'-3.14'.zfill(7):" + '-3.14'.zfill(7))
print("'3.14159265359'.zfill(5):" + '3.14159265359'.zfill(5))

# str.format() 的基本使用如下:
print('{}网址： "{}!"'.format('百度', 'www.baidu.com'))
# 括号及其里面的字符 (称作格式化字段) 将会被 format() 中的参数替换。
# 在括号中的数字用于指向传入对象在 format() 中的位置，如下所示：
print('{0} 和 {1}'.format('0Google', '1baidu'))
print('{1} 和 {0}'.format('0Google', '1baidu'))
# 如果在 format() 中使用了关键字参数, 那么它们的值会指向使用该名字的参数。
print('{name}网址： {site}'.format(name='baidu', site='www.baidu.com'))
print('{site}网址： {name}'.format(name='baidu', site='www.baidu.com'))
#位置及关键字参数可以任意的结合:
print('站点列表 {0}, {1}, 和 {other}。'.format('Google', 'baidu', other='Taobao'))
#!a (使用 ascii()), !s (使用 str()) 和 !r (使用 repr()) 可以用于在格式化某个值之前对其进行转化:
import math
print('常量 PI 的值近似为： {}。'.format(math.pi))
print('常量 PI 的值近似为： {!r}。'.format(math.pi))
#可选项 : 和格式标识符可以跟着字段名。 这就允许对值进行更好的格式化。
#下面的例子将 Pi 保留到小数点后三位：
print('常量 PI 的值近似为 {0:.3f}。'.format(math.pi))# 常量 PI 的值近似为 3.142。

# --------------------------
# 2.输入
#Python提供了 input() 内置函数从标准输入读入一行文本，默认的标准输入是键盘。
#input 可以接收一个Python表达式作为输入，并将运算结果返回
str = input("请输入：");
print ("你输入的内容是: ", str)


#--------------------------
#3.文件读和写文件
#open() 将会返回一个 file 对象，基本语法格式如下:open(filename, mode)
# r	    以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
# rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。
# r+	打开一个文件用于读写。文件指针将会放在文件的开头。
# rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
# w	    打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# w+	打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# a	    打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
# ab	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
# a+	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
# ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。

'''
模式	    r	r+	w	w+	a	a+
读	        +	+		+		+
写		        +	+	+	+	+
创建			    +	+	+	+
覆盖			    +	+		
指针在开始	+	+	+	+		
指针在结尾					+	+
'''




















