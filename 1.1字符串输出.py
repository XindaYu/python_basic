# -----------------------------Python字符串格式化-----------------------------
# Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，
# 但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。
print("我叫 %s 今年 %d 岁!" % ('小明', 10))
# python 字符串格式化符号:
#      %c	 格式化字符及其ASCII码
#      %s	 格式化字符串
#      %d	 格式化整数
#      %u	 格式化 无符号 整型
#      %o	 格式化无符号 八进制数
#      %x	 格式化无符号 十六进制数
#      %X	 格式化无符号 十六进制数（大写）
#      %f	 格式化 浮点数字，可指定小数点后的精度
#      %e	 用科学计数法格式化浮点数
#      %E	 作用同%e，用科学计数法格式化浮点数
#      %g	 %f和%e的简写
#      %G	 %F 和 %E 的简写
#      %p	 用十六进制数格式化变量的地址
#
# 格式化操作符辅助指令
# *	定义宽度或者小数点精度
# -	用做左对齐
# +	在正数前面显示加号( + )
# <sp>	在正数前面显示空格
# #	在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')
# 0	显示的数字前面填充'0'而不是默认的空格
# %	'%%'输出一个单一的'%'
# (var)	映射变量(字典参数)
# m.n.	m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)
#
# ：：：：：：->format 格式化函数
# Python2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。
# 基本语法是通过 {} 和 : 来代替以前的 % 。
# format 函数可以接受不限个参数，位置可以不按顺序。
# ....不设置参数
print("{} {}".format("hello", "world"))  # 不设置指定位置，按默认顺序 ->:hello world
print("{0} {1}".format("hello", "world"))  # 设置指定位置
print("{0} bc {0} {1}".format("hello", "world"))  # 设置指定位置

# ...设置参数
print("网站名：{name}, 地址 {url}".format(name="菜鸟教程", url="www.runoob.com"))

# 通过字典设置参数
site = {"name": "百度", "url": "www.baidu.com"}
print("网站名：{name}, 地址 {url}".format(**site))  # 要加**

# 通过列表索引设置参数
my_list = ['百度', 'www.baidu.com']
print("网站名：{0[0]}, 地址 {0[1]}".format(my_list))  # "0" 是必须的


# 也可以向 str.format() 传入对象：
class AssignValue(object):
    def __init__(self, value):
        self.value = value


my_value = AssignValue(6)
print('value 为: {0.value}'.format(my_value))  # "0" 是可选的

# ---------------------------------数字格式化--------------------------
# str.format() 格式化数字的多种方法：
# 3.1415926	{:.2f}	3.14	保留小数点后两位
# 3.1415926	{:+.2f}	+3.14	带符号保留小数点后两位
# -1	{:+.2f}	-1.00	带符号保留小数点后两位
# 2.71828	{:.0f}	3	不带小数

# 5	{:0>2d}	05	数字补零 (填充左边, 宽度为2)
# 5	{:x<4d}	5xxx	数字补x (填充右边, 宽度为4)
# 10	{:x<4d}	10xx	数字补x (填充右边, 宽度为4)
# 1000000	{:,}	1,000,000	以逗号分隔的数字格式

# 0.25	{:.2%}	25.00%	百分比格式
# 1000000000	{:.2e}	1.00e+09	指数记法
# 13	{:>10d}	->:        13	 右对齐 (默认, 宽度为10)
# 13	{:<10d}	->:13	         左对齐 (宽度为10)
# 13	{:^10d}	->:    13	     中间对齐 (宽度为10)

# ^, <, > 分别是居中、左对齐、右对齐，后面带宽度，
# : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。
# + 表示在正数前显示 +，负数前显示 -；  （空格）表示在正数前加空格
# b、d、o、x 分别是二进制、十进制、八进制、十六进制。
# 此外我们可以使用大括号 {} 来转义大括号，如下实例：
print("{} 对应的位置是 {{0}}".format("runtest"))  # runtest 对应的位置是 {0}
print("{:.2f}".format(3.1415926))
'''
进制
'{:b}'.format(11)    1011
'{:d}'.format(11)    11
'{:o}'.format(11)    13
'{:x}'.format(11)    b
'{:#x}'.format(11)   0xb
'{:#X}'.format(11)	 0XB
'''
